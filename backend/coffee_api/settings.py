"""
Django settings for coffee_api project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta
import cloudinary
import cloudinary.uploader
import cloudinary.api

# Import logging configuration
from .logging_config import setup_logging

# Load env
load_dotenv()

# Setup logging
setup_logging()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY") or os.getenv("DJANGO_SECRET_KEY")
if not SECRET_KEY:
    # Generate a secure secret key if not provided
    from django.core.management.utils import get_random_secret_key
    SECRET_KEY = get_random_secret_key()
    print("⚠️  WARNING: Using auto-generated SECRET_KEY. Set SECRET_KEY environment variable for production!")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in ("true", "1", "yes") or os.getenv("DJANGO_DEBUG", "True").lower() in ("true", "1", "yes")

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'rest_framework',  # For REST API
    'rest_framework_simplejwt', # For JWT authentication
    'rest_framework_simplejwt.token_blacklist',  # For JWT token blacklisting
    'corsheaders',  # For handling CORS,
    'celery',   # For asynchronous task processing
]

# Add Cloudinary apps only if configured
CLOUDINARY_CLOUD_NAME = os.getenv('CLOUD_NAME') or os.getenv('CLOUDINARY_CLOUD_NAME')
if CLOUDINARY_CLOUD_NAME:
    INSTALLED_APPS.extend([
        'cloudinary',  # For image handling
        'cloudinary_storage',  # For storing images in Cloudinary
    ])

# Parser, permission and authentication settings for DRF
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # For browsable API
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',  # For file uploads
    ),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    # Rate limiting for unauthenticated users
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'login': '5/min',  # Custom rate for login attempts
    }
}

# Enhanced JWT Configuration for Security and Performance
SIMPLE_JWT = {
    # Token lifetimes - Security optimized
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Short-lived for security
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # 1 week refresh cycle
    
    # Token rotation for enhanced security
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    
    # Algorithm and signing
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': os.getenv('JWT_SIGNING_KEY', SECRET_KEY),  # Use separate JWT key if available
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': 'coffee-shop-api',
    
    # Token validation
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    # Token content
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    # Sliding tokens disabled for better security
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
    
    # Security features
    'UPDATE_LAST_LOGIN': True,  # Track user login activity
    
    # Custom claims (can be extended)
    'TOKEN_OBTAIN_SERIALIZER': 'api.jwt_serializers.CustomTokenObtainPairSerializer',
    'TOKEN_REFRESH_SERIALIZER': 'api.jwt_serializers.CustomTokenRefreshSerializer',
    'TOKEN_VERIFY_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenVerifySerializer',
    'TOKEN_BLACKLIST_SERIALIZER': 'api.jwt_serializers.LogoutSerializer',
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # <-- must be first!
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS Configuration for JWT Authentication
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React app running on localhost
    "http://127.0.0.1:3000",  # Alternative localhost
    "http://frontend:3000",   # Docker container name
]

# Additional CORS settings for JWT
CORS_ALLOW_CREDENTIALS = True  # Required for JWT cookies if used
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Security Headers for Production
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Session settings for enhanced security
SESSION_COOKIE_SECURE = not DEBUG  # Use HTTPS in production
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = not DEBUG  # Use HTTPS in production
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'

ROOT_URLCONF = 'coffee_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'api' / 'templates' / 'email_template',  # Add email template directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'coffee_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

# Check if DATABASE_URL is provided (for production/cloud deployment)
DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL:
    # Use DATABASE_URL for production (Render, Heroku, etc.)
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600)
    }
    print("✅ Using DATABASE_URL for database connection")
else:
    # For local development or when individual env vars are provided
    IS_LOCAL = os.getenv('POSTGRES_HOST') in [None, 'localhost', '127.0.0.1', 'db']
    
    if IS_LOCAL and not os.getenv('POSTGRES_HOST'):
        # Local development with SQLite
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        print("✅ Using SQLite for local development")
    else:
        # External PostgreSQL database
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('POSTGRES_DB'),
                'USER': os.getenv('POSTGRES_USER'),
                'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
                'HOST': os.getenv('POSTGRES_HOST'),
                'PORT': os.getenv('POSTGRES_PORT', '5432'),
                'OPTIONS': {
                    'sslmode': 'disable',  # Required for most cloud databases
                    'connect_timeout': 60,
                },
                'CONN_MAX_AGE': 600,  # Connection pooling
            }
        }
        print(f"✅ Using PostgreSQL: {os.getenv('POSTGRES_HOST')}:{os.getenv('POSTGRES_PORT', '5432')}")
        
        # Debug database connection
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"Database Host: {os.getenv('POSTGRES_HOST')}")
        logger.info(f"Database Name: {os.getenv('POSTGRES_DB')}")
        logger.info(f"Database User: {os.getenv('POSTGRES_USER')}")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'api.CustomUser'

# Caches settings
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')
if REDIS_PASSWORD:
    CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://:{REDIS_PASSWORD}@redis:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# print(f'API Key: {os.getenv("API_KEY")}')

# Cloudinary settings (optional)
CLOUDINARY_CLOUD_NAME = os.getenv('CLOUD_NAME') or os.getenv('CLOUDINARY_CLOUD_NAME')
CLOUDINARY_API_KEY = os.getenv('API_KEY') or os.getenv('CLOUDINARY_API_KEY')
CLOUDINARY_API_SECRET = os.getenv('API_SECRET') or os.getenv('CLOUDINARY_API_SECRET')

# Only configure Cloudinary if all credentials are provided
if CLOUDINARY_CLOUD_NAME and CLOUDINARY_API_KEY and CLOUDINARY_API_SECRET:
    # Configure cloudinary
    try:
        cloudinary.config(
            cloud_name=CLOUDINARY_CLOUD_NAME,
            api_key=CLOUDINARY_API_KEY,
            api_secret=CLOUDINARY_API_SECRET,
            secure=True
        )
    except NameError:
        # cloudinary not installed, skip configuration
        pass
    
    # CLOUDINARY_STORAGE dictionary (required by django-cloudinary-storage)
    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': CLOUDINARY_CLOUD_NAME,
        'API_KEY': CLOUDINARY_API_KEY,
        'API_SECRET': CLOUDINARY_API_SECRET
    }
    
    # CLOUDINARY_URL format (alternative configuration method)
    CLOUDINARY_URL = f"cloudinary://{CLOUDINARY_API_KEY}:{CLOUDINARY_API_SECRET}@{CLOUDINARY_CLOUD_NAME}"
    
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
    print("✅ Cloudinary configuration loaded successfully")
    
    # Debug logging for environment variables
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"Cloudinary configured with cloud_name: {CLOUDINARY_CLOUD_NAME}")
else:
    # Use local file storage if Cloudinary is not configured
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    print("⚠️  Cloudinary not configured, using local file storage")
    print(f"   CLOUD_NAME: {'✓' if CLOUDINARY_CLOUD_NAME else '✗'}")
    print(f"   API_KEY: {'✓' if CLOUDINARY_API_KEY else '✗'}")
    print(f"   API_SECRET: {'✓' if CLOUDINARY_API_SECRET else '✗'}")
    
    # Debug logging for missing environment variables
    import logging
    logger = logging.getLogger(__name__)
    if not CLOUDINARY_CLOUD_NAME:
        logger.warning("CLOUD_NAME environment variable not set")
    if not CLOUDINARY_API_KEY:
        logger.warning("API_KEY environment variable not set")
    if not CLOUDINARY_API_SECRET:
        logger.warning("API_SECRET environment variable not set")

# Static files settings
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Changed from console to smtp
EMAIL_HOST = os.getenv('EMAIL_HOST') 
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))  # Convert to int with default
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

# Logging settings
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": "django.log",
            "formatter": "verbose",
        },
        # Commented out for Render deployment - use external Graylog if needed
        # "graylog": {
        #     "level": "INFO",
        #     "class": "graypy.GELFUDPHandler",
        #     "host": "graylog",
        #     "port": 12201,
        # },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],  # Add "graylog" if using external service
            "level": "INFO",
            "propagate": True,
        },
        "api": {
            "handlers": ["console", "file"],  # Add "graylog" if using external service
            "level": "INFO",
            "propagate": False,
        },
    },
}