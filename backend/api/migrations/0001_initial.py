# Generated by Django 5.2.4 on 2025-07-30 18:33

import cloudinary_storage.storage
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(help_text='Enter the name of the category', max_length=100, verbose_name='Category Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created Date of Category')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Date of Category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'category',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Automatically generated unique ID for the order', unique=True, verbose_name='Order Unique ID')),
                ('customer_name', models.CharField(help_text='Enter name of customer', max_length=255, verbose_name='Name of Customer')),
                ('order_duedate', models.DateTimeField(help_text='Enter due date for Order', verbose_name='Order Due Date')),
                ('order_total_price', models.DecimalField(decimal_places=2, help_text='Enter the total price of the order', max_digits=10, verbose_name='Order Total Price')),
                ('order_status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('in process', 'In Process'), ('completed', 'Completed'), ('canceled', 'Canceled')], default='pending', help_text='Current status of the order', max_length=10, verbose_name='Order Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created Date of Reviews')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Date of Reviews')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'db_table': 'order',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(help_text='Enter the name of the customer', max_length=100, verbose_name='Customer name')),
                ('customer_email', models.EmailField(help_text='Enter the email of the customer', max_length=100, verbose_name='Customer email')),
                ('customer_phone', models.CharField(help_text='Enter the phone number of the customer', max_length=100, verbose_name='Customer phone number')),
                ('reservation_date', models.DateTimeField(help_text='Select the date and time of reservation', verbose_name='Reservation Date')),
                ('customer_message', models.CharField(help_text='Enter the message of the customer', max_length=2000, verbose_name='Customer message')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created Date of Reservation')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Date of Reservation')),
            ],
            options={
                'verbose_name': 'Reservation',
                'verbose_name_plural': 'Reservations',
                'db_table': 'reservation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Teammate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teammate_name', models.CharField(help_text='Enter the name of the team member', max_length=100, verbose_name='Team Member Name')),
                ('teammate_role', models.CharField(help_text='Enter the role of the team member', max_length=50, verbose_name='Team Member Role')),
                ('teammate_image', models.ImageField(blank=True, null=True, storage=cloudinary_storage.storage.MediaCloudinaryStorage(), upload_to='team/')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created Date of Team Member')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Date of Team Member')),
            ],
            options={
                'verbose_name': 'Team Member',
                'verbose_name_plural': 'Team Members',
                'db_table': 'teammate',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(default=None, help_text='Enter email for user', max_length=100, verbose_name='Email of admin')),
                ('role', models.CharField(choices=[('staff', 'Staff'), ('admin', 'Admin')], default=None, help_text='Select user role', verbose_name='Role of user')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Custom User',
                'verbose_name_plural': 'Custom Users',
                'db_table': 'customuser',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(help_text='Enter the name of product', max_length=100, verbose_name='Product name')),
                ('product_price', models.DecimalField(decimal_places=2, help_text='Enter the price of product', max_digits=10, verbose_name='Product price')),
                ('product_like_count', models.PositiveIntegerField(default=0, help_text='Enter the like count of product', verbose_name='Product like count')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='api.category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'product',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Enter the quantity', verbose_name='Enter the quantity of product in the order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created Date of Reviews')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Date of Reviews')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='api.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='api.product')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'db_table': 'orderitem',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Images',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Please upload the image', storage=cloudinary_storage.storage.MediaCloudinaryStorage(), upload_to='product/', verbose_name='The image field for products')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created Date of Images')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Date of Images')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='api.product')),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
                'db_table': 'image',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewer_name', models.CharField(help_text='Enter the name of the reviewer', max_length=100, verbose_name='Reviewer email')),
                ('reviewer_email', models.EmailField(help_text='Enter the email of the reviewer', max_length=100, verbose_name='Reviewer email')),
                ('reviewer_comment', models.TextField(help_text='Enter the comment of the reviewer', verbose_name='Reviewer comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created Date of Reviews')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated Date of Reviews')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.product')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'db_table': 'review',
                'ordering': ['-created_at'],
            },
        ),
    ]
