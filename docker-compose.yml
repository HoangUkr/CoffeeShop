# version: '3.9'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    # command: uv run gunicorn coffee_api.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./backend:/app
      - /app/.venv
    ports:
      - "8000:8000"
    environment:
      DJANGO_SETTINGS_MODULE: coffee_api.settings
      PYTHONUNBUFFERED: 1
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      GRAYLOG_HOST: ${GRAYLOG_HOST}
      GRAYLOG_PORT: ${GRAYLOG_PORT}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    restart: always
    env_file:
      - ./backend/.env
      - .env
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; socket.create_connection(('127.0.0.1', 8000), timeout=5).close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks: 
      - app-network
      - db-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      graylog:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m

  db:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # ports:
    #   - "5432:5432"
    env_file:
      - .env
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 536870912
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    env_file:
      - .env
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a \"$$REDIS_PASSWORD\" ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery
    command: celery -A coffee_api worker --loglevel=info
    volumes:
      - ./backend:/app
      - /app/.venv
    env_file:
      - ./backend/.env
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: coffee_api.settings
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    networks:
      - app-network
      - db-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: always

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery-beat
    command: celery -A coffee_api beat --loglevel=INFO
    volumes:
      - ./backend:/app
      - /app/.venv
    env_file:
      - ./backend/.env
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: coffee_api.settings
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - app-network
      - db-network
    restart: always
    
  flower:
    image: mher/flower
    container_name: flower
    env_file:
      - ./backend/.env
      - .env
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    ports:
      - "5555:5555"
    depends_on:
      - celery
      - redis
    networks:
      - app-network
    restart: always


  mongo:
    image: mongo:6.0
    container_name: mongo
    restart: always
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: "2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g

  graylog:
    image: graylog/graylog:5.1
    container_name: graylog
    depends_on:
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD_SECRET}
      - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_ROOT_PASSWORD_SHA2}
      - GRAYLOG_HTTP_EXTERNAL_URI=${GRAYLOG_HTTP_EXTERNAL_URI}
      - GRAYLOG_MONGODB_URI=${GRAYLOG_MONGODB_URI}
      - GRAYLOG_ELASTICSEARCH_HOSTS=${GRAYLOG_ELASTICSEARCH_HOSTS}
    ports:
      - "9000:9000"     # Web UI
      - "12201:12201/udp"  # GELF UDP input
    volumes:
      - graylog_data:/usr/share/graylog/data
    env_file:
      - .env
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/lbstatus"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m
    restart: always

  frontend:
    build:
      context: ./frontend/coffee_shop
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      - VITE_REST_API_URL=${VITE_REST_API_URL}
    volumes:
      - ./frontend/coffee_shop:/app
      - /app/node_modules
    env_file:
    - .env
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m

networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mongo_data:
  elasticsearch_data:
  graylog_data: